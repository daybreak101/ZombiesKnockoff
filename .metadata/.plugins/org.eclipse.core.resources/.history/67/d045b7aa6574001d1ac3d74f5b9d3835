package entities.bullets;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.geom.Ellipse2D;

import entities.creatures.Zombie;
import entities.statics.InteractableStaticEntity;
import main.Handler;

public class IceStorm extends Bullet {

	Ellipse2D.Float stormRadius;
	
	public IceStorm(Handler handler, float x, float y) {
		super(handler, x, y, 2);
	}
	
	public boolean checkForImpact() {
		cb = new Rectangle((int) (x + bounds.x - 1), (int) (y + bounds.y - 1), width + 1, height + 1);
		stormRadius = new Ellipse2D.Float((int) (x - 100), (int) (y - 100), 200, 200);
		
		for (Zombie e : handler.getWorld().getEntityManager().getZombies().getObjects()) {
			if (e.getHitBox(0, 0).intersects(cb)) {
				e.freeze();
			}
		}

		for (InteractableStaticEntity e : handler.getWorld().getEntityManager().getInteractables()) {
			if (e.getCollisionBounds(0, 0).intersects(cb)) {
				handler.getWorld().getEntityManager().getEntities().remove(this);
				return true;
			}
		}
		return false;
	}

	public void die() {
		rangeCounter++;
		if (handler.getPlayer().getInv().isDeadshot()) {
			if (rangeCounter >= range * 1.5) {
				handler.getWorld().getEntityManager().getEntities().remove(this);
			}
		} else if (rangeCounter >= range) {
			speed = 0;
		}
	}
	
	public void render(Graphics g) {
		if (gunFiredFrom.isUpgraded())
			g.setColor(new Color(255, 160, 240));
		else
			g.setColor(Color.yellow);
		g.fillOval((int) (stormRadius.x - handler.getGameCamera().getxOffset()), (int) (stormRadius.y - handler.getGameCamera().getyOffset()), (int) stormRadius.width, (int) stormRadius.height);
		if(rangeCounter < range)
		g.fillRect((int) (x - handler.getGameCamera().getxOffset()), (int) (y - handler.getGameCamera().getyOffset()),
				width, height);
	}


	
	
}
